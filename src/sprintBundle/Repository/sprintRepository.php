<?php

namespace sprintBundle\Repository;

/**
 * sprintRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class sprintRepository extends \Doctrine\ORM\EntityRepository
{

    public function getProgress($search)
    {
        $statement= $this->getEntityManager()
            ->getConnection()
            ->prepare("SELECT COUNT(*) as Progress FROM sprint where  	projets_id=$search AND etat=1 ");
        $statement->execute();
        $results = $statement->fetchAll();

        return $results;
    }
    public function getProgressC($search)
    {
        $statement= $this->getEntityManager()
            ->getConnection()
            ->prepare("SELECT COUNT(*) as ProgressC FROM sprint where  	projets_id=$search");
        $statement->execute();
        $results = $statement->fetchAll();

        return $results;
    }

    public function scarra($idd)
    {
        $statement= $this->getEntityManager()
            ->getConnection()
            ->prepare("SELECT * from task WHERE sprint_id=$idd ");
        $statement->execute();
        $results = $statement->fetchAll();

        return $results;
    }

    public function scarra__($id,$etat)
    {
        $etat_ = "------";
        if($etat == 999)
        {
            $etat_ = "To Do";
        }
        elseif ($etat == 888)
        {
            $etat_ = "In Progress";
        }
        elseif ($etat == 777)
        {
            $etat_ = "Done";
        }

        $statement= $this->getEntityManager()
            ->getConnection()
            ->prepare("update task set state='$etat_' where id=$id");
        $statement->execute();

        return true;
    }
    public function updatesprintetat($id)
    {
        $statement= $this->getEntityManager()
            ->getConnection()
            ->prepare("UPDATE sprint s 
JOIN task t ON t.sprint_id = s.id 
SET etat = 1
WHERE 
  t.state = \"Done\" AND t.sprint_id =$id AND s.id=$id");
        $statement->execute();

        return true;
    }
    public function updatesprintetat2($id)
    {
        $statement= $this->getEntityManager()
            ->getConnection()
            ->prepare("UPDATE sprint s 
JOIN task t ON t.sprint_id = s.id 
SET etat = 0
WHERE 
  t.state = \"To Do\" OR t.state = \"In Progress\"AND t.sprint_id =$id AND s.id=$id");
        $statement->execute();

        return true;
    }
    public function getTodo($search)
    {
        $statement= $this->getEntityManager()
            ->getConnection()
            ->prepare("SELECT COUNT(*) as Todo FROM task where  	sprint_id=$search AND (state='To Do' OR state='In Progress' )");
        $statement->execute();
        $results = $statement->fetchAll();

        return $results;
    }
    public function getDone($search)
    {
        $statement= $this->getEntityManager()
            ->getConnection()
            ->prepare("SELECT COUNT(*) as Done FROM task where  	sprint_id=$search AND state='Done' ");
        $statement->execute();
        $results = $statement->fetchAll();

        return $results;
    }
    public function getDoneT($search)
    {
        $statement= $this->getEntityManager()
            ->getConnection()
            ->prepare("SELECT COUNT(*) as DoneT FROM task where  	sprint_id=$search  ");
        $statement->execute();
        $results = $statement->fetchAll();

        return $results;
    }
    public function findprojet($id_projet)
    {
        $query=$this->getEntityManager()->createQuery("SELECT c FROM sprintBundle:sprint c WHERE c.projets='$id_projet' ");
        return $query->getResult();

    }
}
